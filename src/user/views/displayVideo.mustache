<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
    integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

  <title>
    {{videoName}}
  </title>
</head>

<body class="pt-3 bg-dark text-light">
  <script src="/assets/js/vtt.js"></script>
  <script>
    const getBlobFromUrl = (myImageUrl) => {
      return new Promise((resolve, reject) => {
        let request = new XMLHttpRequest();
        request.open('GET', myImageUrl, true);
        request.responseType = 'blob';
        request.onload = () => {
          resolve(request.response);
        };
        request.onerror = reject;
        request.send();
      })
    }
    function convert(event) {
      console.log("here");
      const file = document.getElementById("subs")
      if (!file.src.endsWith('.srt')) {
        console.log('Process Error: you must select a subtitle file that ends with .srt');
        return;
      }
      getBlobFromUrl(file.src).then((blob) => {

        const webvtt = new WebVTTConverter(blob);
        webvtt
          .getURL()
          .then(url => {
            file.src = url;
            console.log(url);
            // webvtt.release()
          })
          .catch(err => {
            console.log('Process Error: ' + err);
          });
      })
    }

  </script>
  <div class="container-fluid">
    <div class="row">
      <div class="col">
        <kbd class="d-flex justify-content-center">
          <h3 class="align-self-center"> {{videoName}} </h3>
          <a id="home_page" type="button" class="m-3 btn btn-success" href=".">Go Back to Directory</a>
        </kbd>
      </div>
    </div>
    <div class="row">
      
      <div class="col-3 col-sm-2 text-left align-self-center">
        <a id="prev" type="button" class="btn btn-lg btn-danger" href="{{prev}}">Prev</a>
      </div>
      
      <div class="col-6 col-sm-8 embed-responsive embed-responsive-16by9">
        <video width="auto" onloadstart='convert(1)' class="embed-responsive-item" controls>
          <source src="{{videoSource}}" type="{{videoType}}">
          <track id="subs" src="{{subtitleSource}}" kind="subtitles" srclang="en" label="English" default />
          <p>
            Your browser doesn't support HTML5 video.
          </p>
        </video>
      </div>
      
      <div class="col-3 col-sm-2 text-right align-self-center">
        <a id="next" type="button" class="btn btn-lg btn-primary" href="{{next}}">Next</a>
      </div>
      
    </div>
  </div>
  <script>
    
    let nextVideoLink = document.querySelector('#next');
    let previousVideoLink = document.querySelector('#prev');

    {{^next}}
    nextVideoLink.style.visibility = 'hidden';
    {{/next}}

    {{^prev}}
    previousVideoLink.style.visibility = 'hidden';
    {{/prev}}

  </script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous">
    </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous">
    </script>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    const video = document.querySelector('video');
    let rewindIntervalId, forwardIntervalId;
    document.addEventListener('keydown', (event) => {
      console.log(event);
      console.log(Object.getOwnPropertyNames(event));
      axios.post('/api/keycodes', {
        altKey: event.altKey,
        shiftKey: event.shiftKey,
        keyCode: event.keyCode,
        code: event.code,
        key: event.key
      });
      if (event.isComposing || event.keyCode == 229) {
        return;
      }
      if (event.key === 'p' || event.key === 'MediaPlayPause') {
        if (video.paused)
          video.play();
        else video.pause();
      }
      if (event.key === 'ArrowLeft' || event.key == 'MediaRewind') {
        video.currentTime = (video.currentTime > 10 ? video.currentTime - 10 : 0);  //reduce video's current time by 10s or 
      }                                                                               //reduce it to 0 if current time is less than 10s
      if (event.key == 'ArrowRight' || event.key == 'MediaFastForward') {
        video.currentTime = (video.duration - video.currentTime > 10 ? video.currentTime + 10 : video.duration) //increase video current time by 10s 
      }                                                          //or increase it to video's duration if currentTime + 10s will exceed video's duration
      if(!isNaN(event.key)) //event.key is a number
      {
        percentageToConsider = (+event.key)*10  //converting string to number
        video.currentTime = (percentageToConsider/100) * video.duration;
      }
    });
    document.addEventListener('keyup', (event) => {
      if (event.isComposing || event.keyCode == 229) {
        return;
      }
      if (event.key === 'l') {

      }
    });
  </script>
  <script>
    $(document).ready(() => {
      const video = document.querySelector('video');
      video.onended = () => {
        document.getElementById("next").click();
      }
      axios.get('/api/video/get-current-time', {
        params: {
          source: '{{{videoSource}}}'
        }
      })
        .then((response) => {
          let currentTimeReceived = response.data.data.currentTime;
          if (currentTimeReceived > 0 && confirm("Resume video ?")) {
            video.currentTime = currentTimeReceived;
          }
        })
        .catch((error) => {
          console.log(error);
        });

      let lastCurrentTime = 0;
      function updateCurrentTime() {
        let currentTime = video.currentTime;
        if (currentTime === lastCurrentTime) {
          return;
        }
        else {
          lastCurrentTime = currentTime;
        }
        return axios.post('/api/video/update-current-time', {
          source: "{{{videoSource}}}",
          currentTime: currentTime,
        }, {

        })
          .then((response) => {
            console.log(response);
          })
          .catch((error) => {
            console.log(error.response.data);
            console.log(error.response.status);
            console.log(error.response.headers);
            console.log(error.request);
          })
      }

      setInterval(updateCurrentTime, 5 * 1000); //call setInterval function every 10s

    })
  </script>


</body>

</html>